/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode* dummy = new ListNode(-1);
        dummy->next = head;
        head = dummy;
        while(head->next != NULL)
            head = reverseKNodes(head, k);
        return dummy->next;
    }
    
    ListNode* reverseKNodes(ListNode*head, int k) {
         ListNode* node = head;
         for(int i = 0; i < k; i++) {
                if(node->next == NULL)
                    return node;
                node = node->next;
         }
         ListNode* n1 = head->next;
         ListNode* curt = n1;
         ListNode* next = curt->next;
         
         for(int i = 0; i < k - 1; i++) {
              if(next == NULL) {
                  n1->next = NULL;
                  break;
              }
              ListNode* temp = next->next;
              next->next = curt;
              curt = next;
              next = temp;
         }
         //previous node before the reverse, link to the new head 
         head->next = curt;
         //this is actually the tail or previous node of the next k session of the linked list 
         n1->next = next;
        
         return n1;
         
    }
};
