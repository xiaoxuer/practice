
Notes related to this: 

http://genbattle.bitbucket.org/blog/2016/02/06/Modern-C-Memory-Management-With-unique-ptr/

https://mbevin.wordpress.com/2012/11/18/smart-pointers/

dynamic array 
http://blog.csdn.net/rsljdkt/article/details/12223253

pass in a deleter 

http://ilanever.com/article/detail.do;jsessionid=6537CA81BB4B217D96B2AABD89714DC7?id=22

dynamic arrays 

http://particle128.com/posts/2015/04/smart-ptr.html


实际上，除非需要共享目标，否则unique_ptr更适合使用数组：

std::unique_ptr<int[]> up(new int[10]); // this will correctly call delete[]

 

ps，上面代码可以正确的分配空间，但是空间内的值都没有初始化。如果需要默认初始化为0，可以使用下面的代码：

std::unique_ptr<int[]> up(new int[10]()); // this will correctly call delete[]  初始化为0

//how to pass 

http://stackoverflow.com/questions/10802046/whats-the-point-of-stdunique-ptrget



http://blog.leanote.com/post/804305986@qq.com/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84

/http://www.cnblogs.com/Tour/p/4047169.html
auto_ptr只能托管单独的指针，而不能用于堆上动态分配的数组。而unique_ptr则可以用于数组：
复制代码

 1 struct Item
 2 {
 3      Item(){cout<<"Construct "<<endl;}
 4      ~Item() {cout<<"Destruct"<<endl;}
 5 };
 6 int _tmain(int argc, _TCHAR* argv[])
 7 {
 8      Item *par = new Item[5];
 9      unique_ptr<Item[]> uparr(par);
10  
11      return 0;
12 }



智能指针和动态数组

标准库提供了一个可以管理new分配数组的unique_ptr版本，为了用一个unique_ptr管理动态数组，我们必须在对象类型后面跟一对方括号。

unique_ptr<int[]>up(new int[10]);

up.realese();//自动用delete[]销毁其指针。

当unique_ptr指向数组时我们不能使用点和箭头运算符，而是用下标来访问数组中的元素：

for(size_ti=0;i I != 10; ++i)

up[i]=i;


unique_ptr<T[]>u //u指向一个类型为T的动态分配的数组

unique_ptr<T[]>u (p) //u指向内置指针p所指向的动态分配的数组。P必须能转换为类型T＊

u[i] //返回位置i的元素




