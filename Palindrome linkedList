/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head) {
        ListNode* prev, *next;
        prev = NULL;
        while(head != NULL) {
             next = head->next;
             head->next = prev;
             prev = head;
             head = next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
    //find the mid point 
    ///reverse the second half
    //compare the head & mid to see whether they matches 
        ListNode* fast = head;
        ListNode* slow = head;
        if(head == NULL || head->next == NULL)
            return true;
        while(fast->next != NULL && fast->next->next != NULL) {
            fast = fast->next->next;
            slow = slow->next;
        }
        slow = slow->next;
        ListNode* second_head = reverse(slow);
        while(second_head != NULL) {
            if(head->val != second_head->val)   
                return false;
            head = head->next;
            second_head = second_head->next;
        }
        return true;
    }
};
