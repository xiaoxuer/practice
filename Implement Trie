class TrieNode {
public:
    // Initialize your data structure here.
    char ch;
    bool word_end;
    TrieNode* children[26];
    TrieNode(char cur_ch) {
        ch = cur_ch;
        word_end = false;
        for(int i = 0; i < 26; i++)
            children[i]  = NULL;
    }
    TrieNode() {
        ch = '0';
        word_end = false;
        for(int i = 0; i < 26; i++)
            children[i]  = NULL;
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode* cur = root;
        for(int i = 0; i < word.length(); i++) {
            int idx = word[i] - 'a';
            if(cur->children[idx] == NULL) {
                cur->children[idx] = new TrieNode(word[i]);
            }
            cur = cur->children[idx];
        }
        cur->word_end = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        int len  = word.length();
        int idx;
        TrieNode* cur = root;
        for(int i = 0; i < len; i++) {
            idx = word[i] - 'a';
            if(cur->children[idx] == NULL)
                return false;
            cur = cur->children[idx];
        }
        return cur->word_end ? true : false;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        int len = prefix.length();
        TrieNode* cur = root;
        for(int i = 0; i < len; i++) {
            int idx = prefix[i] - 'a';
            if(cur->children[idx] == NULL)
                return false;
            cur = cur->children[idx];
        }
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
