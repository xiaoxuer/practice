  647  vi xue.sh 
  648  chmod 777 xue.sh 
  649  ./xue.sh 
  650  debuginfo-install rhel-x86_64-201609
  651  stap
  652  uname -r
  653  stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'.
  654  stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
  655  sudo stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
  656  sudo yum install kernel-devel-4.4.23-31.54.amzn1.x86_64 
  657  sudo stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
  658   debuginfo-install kernel-4.4.23-31.54.amzn1.x86_64
  659  sudo  debuginfo-install kernel-4.4.23-31.54.amzn1.x86_64
  660  stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
  661  sudo stap -v -e 'probe vfs.read {printf("read performed\n"); exit()}'
  662  history 
  
  
  sample systemtap script

https://sourceware.org/systemtap/examples/keyword-index.html

light weight 

#! /usr/bin/env stap

# This script tries to identify contended user-space locks by hooking
# into the futex system call.

global FUTEX_WAIT = 0 /*, FUTEX_WAKE = 1 */
global FUTEX_PRIVATE_FLAG = 128 /* linux 2.6.22+ */
global FUTEX_CLOCK_REALTIME = 256 /* linux 2.6.29+ */

global lock_waits # long-lived stats on (tid,lock) blockage elapsed time
global process_names # long-lived pid-to-execname mapping

probe syscall.futex.return {
  if (($op & ~(FUTEX_PRIVATE_FLAG|FUTEX_CLOCK_REALTIME)) != FUTEX_WAIT) next
  if (pid() != 76553) next
  process_names[pid()] = execname()
 # elapsed = gettimeofday_us() - @entry(gettimeofday_us())
  lock_waits[pid(), $uaddr] <<< 1
}

probe end {
  foreach ([pid+, lock] in lock_waits)
    printf ("%s[%d] lock %p contended %d times, %d avg us\n",
            process_names[pid], pid, lock, @count(lock_waits[pid,lock]),
            @avg(lock_waits[pid,lock]))
}

//install system tap 

https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/SystemTap_Beginners_Guide/using-systemtap.html#installproper
