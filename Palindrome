class Solution {
public:
    bool is_palindrome(string str) {
        int str_start = 0;
        int length = str.length();
        int str_end = length - 1;
        while(str_start < str_end) {
            if(str[str_start] != str[str_end])
                return false;
            str_start++;
            str_end--;
        }
        return true;
        
    }
    void helper(vector<vector<string>>& res, vector<string> &sol, string s, int start, int end) {
        if(start > end) {
            res.push_back(sol);
            return;
        }
        for(int i = start; i <= end; i++) {
             if(is_palindrome(s.substr(start, i - start + 1))) {
                sol.push_back(s.substr(start, i - start + 1));
                helper(res, sol, s, i + 1, end);
                sol.pop_back();
             }
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> res;
        vector<string> sol;
        
        helper(res, sol, s, 0, s.length() - 1);
        return res;
    }
};
