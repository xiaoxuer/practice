1. three types of shared mem :
slru for clog 
wal buffer for xlog
shared buffer pool

the way  postgres do the crash recovery, it will save three inform into pg_ctrl file. 
1. db status
2. checkpoint (when to do a check point is decided by engine), this will ensure all the data is persistent(write to disk) after this point. 
3. the previous checkpoint in case #2 has issue 
4. each transcation will generate multiple xlog, when commit happens, it will flush the xlog for this transaction to disk to ensure xlog is
persistent.
5. so persistent xlog may includes logs for un-committed transaction when crash happens.
6. when crash happens, recovery happens from the check point, and replay the xlog based on  clog inform (2bits used to indicate whether the 
transaction is going through or not  00-> in process, 01 -> commit.. ). 
note : xlog & clog shows it is committed, it cannot garuntee the data is persistent. 
7. MVCC: used to ensure reader & writer is not blockin each other, so even if the commit is not durable, reader can still get data out.
8. WAL buffer: before xlog is flushed to grover, they are saved into WAL buffer

Manfred vs postgres 
1. instead of flush xlog , it is doing wait for lsn durable. 
2. when crash happens, the xid may not affect the grover lsn number, since  grover is still updating XID on the page, so the way to solve 
this is by adding a big number to sharedmem->xid, so there is a gap in allocated xid number, but it will ensure the previous xid on grover
will not be overriden. 
3. hotstandby : this is for replication 
4. when crash recovery happens, there are couple of things happened
a. re-construct the end of log inside WALBUFFE
b. skip replay
c. assign XID in shared memory region
