/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool my_compare(Interval &v1, Interval &v2) { 
        return v1.start < v2.start;
    }
        
    vector<Interval> merge(vector<Interval>& intervals) {
          vector<Interval> res;
          int start, end;
          std::sort(intervals.begin(), intervals.end(), my_compare);
          int size = intervals.size();
          if(size == 0)
            return res;
        
          start = intervals[0].start;
          end = intervals[0].end;
          
          for(int i = 1; i < size; i++) {
                   if(intervals[i].start <= end) {
                        end = max(intervals[i].end, end);
                   } else {
                        res.push_back(Interval(start, end));
                        start = intervals[i].start;
                        end = intervals[i].end;
                   }
          }
          res.push_back(Interval(start, end));
          return res;
    }
};
