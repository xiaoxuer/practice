/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generate_helper(int start, int end) {
        vector<TreeNode*> res;
        if(start > end) {
            res.push_back(NULL);
            return res;
        }
        if(start == end) {
             res.push_back(new TreeNode(start));
             return res;
        }
        
        for(int i = start; i <= end; i++) {
            vector<TreeNode*> left = generate_helper(start, i - 1);
            vector<TreeNode*> right = generate_helper(i + 1, end);
            int l_size = left.size();
            int r_size = right.size();
            for(int m = 0; m < l_size; m++) {
                for(int n = 0; n < r_size; n++) {
                    // here , need to create the node at this level , think about it
                    TreeNode* root = new TreeNode(i);
                    root->left = left[m];
                    root->right = right[n];
                    res.push_back(root);
                }
            }
        }
        return res;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> res;
        if(n == 0) return res;
        return generate_helper(1, n);
            
    }
};
