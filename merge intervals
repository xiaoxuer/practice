/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    static bool my_compare(Interval& v1, Interval& v2) {
         return v1.start < v2.start;
    }
    
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> res;
        Interval cur;
        sort(intervals.begin(), intervals.end(), my_compare);
        int size = intervals.size();
        if(size == 0) return res;
        for(int i = 0; i < size; i++) {
            if(i == 0) cur = intervals[0];
            else {
                if(intervals[i].start <= cur.end) {
                    cur.end = max(intervals[i].end, cur.end);
                } else {
                    res.push_back(cur);
                    cur = intervals[i];
                }
            }
        }
        res.push_back(cur);
        return res;
    }
};
