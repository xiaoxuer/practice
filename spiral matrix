class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        //first m current row number
        
        int m = matrix.size();
        vector<int> res;
        if(m == 0)
            return res;
        int n = matrix[0].size();
        int row_start = 0;
        int col_start = 0;

        int first_row, first_col, last_col, last_row;
       //calculate the layer 
        int layer = (min(m, n) + 1) / 2;
        //for each layer, calculate the start and end point 
        for(int i = 0; i < layer; i++)
        { 
            
            first_row = i;
            first_col = i;
            last_col = n -1 - i;
            last_row = m -1 - i;
            
           // if(last_row == i) //so there is no col need to be added 
           //     for(int j = i; j <= last_col; j++)
           //         res.push_back(matrix[last_row][j]);
           // else if(last_col == i) // one col
           //     for(int j = i; j <= last_row; j++)
            //        res.push_back(matrix[j][last_col]);
         //   else { 
                for(int j = i; j < last_col; j++)
                    res.push_back(matrix[i][j]);
                for(int j = i ; j < last_row; j++)
                    res.push_back(matrix[j][last_col]);
                for(int j = last_col; j > i ; j--)
                    res.push_back(matrix[last_row][j]);
                for(int j = last_row; j > i ; j--)
                    res.push_back(matrix[j][i]);
          //  }
        }
        return res;
    }
};
